{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import numpy as np\n",
    "import random\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('./default of credit card clients.xls', header=1, skiprows = 0, index_col = 0)\n",
    "df.rename(index=str, columns={\"default payment next month\": \"defaultPayment\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>PAY_5</th>\n",
       "      <th>...</th>\n",
       "      <th>BILL_AMT4</th>\n",
       "      <th>BILL_AMT5</th>\n",
       "      <th>BILL_AMT6</th>\n",
       "      <th>PAY_AMT1</th>\n",
       "      <th>PAY_AMT2</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "      <th>defaultPayment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>689</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3272</td>\n",
       "      <td>3455</td>\n",
       "      <td>3261</td>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>14331</td>\n",
       "      <td>14948</td>\n",
       "      <td>15549</td>\n",
       "      <td>1518</td>\n",
       "      <td>1500</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>5000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28314</td>\n",
       "      <td>28959</td>\n",
       "      <td>29547</td>\n",
       "      <td>2000</td>\n",
       "      <td>2019</td>\n",
       "      <td>1200</td>\n",
       "      <td>1100</td>\n",
       "      <td>1069</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>20940</td>\n",
       "      <td>19146</td>\n",
       "      <td>19131</td>\n",
       "      <td>2000</td>\n",
       "      <td>36681</td>\n",
       "      <td>10000</td>\n",
       "      <td>9000</td>\n",
       "      <td>689</td>\n",
       "      <td>679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n",
       "ID                                                                         \n",
       "1       20000    2          2         1   24      2      2     -1     -1   \n",
       "2      120000    2          2         2   26     -1      2      0      0   \n",
       "3       90000    2          2         2   34      0      0      0      0   \n",
       "4       50000    2          2         1   37      0      0      0      0   \n",
       "5       50000    1          2         1   57     -1      0     -1      0   \n",
       "\n",
       "    PAY_5  ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  PAY_AMT3  \\\n",
       "ID         ...                                                                  \n",
       "1      -2  ...          0          0          0         0       689         0   \n",
       "2       0  ...       3272       3455       3261         0      1000      1000   \n",
       "3       0  ...      14331      14948      15549      1518      1500      1000   \n",
       "4       0  ...      28314      28959      29547      2000      2019      1200   \n",
       "5       0  ...      20940      19146      19131      2000     36681     10000   \n",
       "\n",
       "    PAY_AMT4  PAY_AMT5  PAY_AMT6  defaultPayment  \n",
       "ID                                                \n",
       "1          0         0         0               1  \n",
       "2       1000         0      2000               1  \n",
       "3       1000      1000      5000               0  \n",
       "4       1100      1069      1000               0  \n",
       "5       9000       689       679               0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 30000 entries, 1 to 30000\n",
      "Data columns (total 24 columns):\n",
      "LIMIT_BAL         30000 non-null int64\n",
      "SEX               30000 non-null int64\n",
      "EDUCATION         30000 non-null int64\n",
      "MARRIAGE          30000 non-null int64\n",
      "AGE               30000 non-null int64\n",
      "PAY_0             30000 non-null int64\n",
      "PAY_2             30000 non-null int64\n",
      "PAY_3             30000 non-null int64\n",
      "PAY_4             30000 non-null int64\n",
      "PAY_5             30000 non-null int64\n",
      "PAY_6             30000 non-null int64\n",
      "BILL_AMT1         30000 non-null int64\n",
      "BILL_AMT2         30000 non-null int64\n",
      "BILL_AMT3         30000 non-null int64\n",
      "BILL_AMT4         30000 non-null int64\n",
      "BILL_AMT5         30000 non-null int64\n",
      "BILL_AMT6         30000 non-null int64\n",
      "PAY_AMT1          30000 non-null int64\n",
      "PAY_AMT2          30000 non-null int64\n",
      "PAY_AMT3          30000 non-null int64\n",
      "PAY_AMT4          30000 non-null int64\n",
      "PAY_AMT5          30000 non-null int64\n",
      "PAY_AMT6          30000 non-null int64\n",
      "defaultPayment    30000 non-null int64\n",
      "dtypes: int64(24)\n",
      "memory usage: 5.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2734fbe0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = df['defaultPayment'], data = df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    22423\n",
       "1     6074\n",
       "Name: defaultPayment, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['defaultPayment'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28497, 24)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Drop the zeros \n",
    "df = df.drop(df[(df.BILL_AMT1 == 0) &\n",
    "                (df.BILL_AMT2 == 0) &\n",
    "                (df.BILL_AMT3 == 0) &\n",
    "                (df.BILL_AMT4 == 0) &\n",
    "                (df.BILL_AMT5 == 0) &\n",
    "                (df.BILL_AMT6 == 0)].index)\n",
    "\n",
    "df = df.drop(df[(df.PAY_AMT1 == 0) &\n",
    "                (df.PAY_AMT2 == 0) &\n",
    "                (df.PAY_AMT3 == 0) &\n",
    "                (df.PAY_AMT4 == 0) &\n",
    "                (df.PAY_AMT5 == 0) &\n",
    "                (df.PAY_AMT6 == 0)].index)\n",
    "\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.loc[:, df.columns != 'defaultPayment'] #.values\n",
    "y = df.loc[:, df.columns == 'defaultPayment'] #.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>PAY_5</th>\n",
       "      <th>...</th>\n",
       "      <th>BILL_AMT3</th>\n",
       "      <th>BILL_AMT4</th>\n",
       "      <th>BILL_AMT5</th>\n",
       "      <th>BILL_AMT6</th>\n",
       "      <th>PAY_AMT1</th>\n",
       "      <th>PAY_AMT2</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>...</td>\n",
       "      <td>689</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>689</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2682</td>\n",
       "      <td>3272</td>\n",
       "      <td>3455</td>\n",
       "      <td>3261</td>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>13559</td>\n",
       "      <td>14331</td>\n",
       "      <td>14948</td>\n",
       "      <td>15549</td>\n",
       "      <td>1518</td>\n",
       "      <td>1500</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>49291</td>\n",
       "      <td>28314</td>\n",
       "      <td>28959</td>\n",
       "      <td>29547</td>\n",
       "      <td>2000</td>\n",
       "      <td>2019</td>\n",
       "      <td>1200</td>\n",
       "      <td>1100</td>\n",
       "      <td>1069</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>35835</td>\n",
       "      <td>20940</td>\n",
       "      <td>19146</td>\n",
       "      <td>19131</td>\n",
       "      <td>2000</td>\n",
       "      <td>36681</td>\n",
       "      <td>10000</td>\n",
       "      <td>9000</td>\n",
       "      <td>689</td>\n",
       "      <td>679</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n",
       "ID                                                                         \n",
       "1       20000    2          2         1   24      2      2     -1     -1   \n",
       "2      120000    2          2         2   26     -1      2      0      0   \n",
       "3       90000    2          2         2   34      0      0      0      0   \n",
       "4       50000    2          2         1   37      0      0      0      0   \n",
       "5       50000    1          2         1   57     -1      0     -1      0   \n",
       "\n",
       "    PAY_5  ...  BILL_AMT3  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  \\\n",
       "ID         ...                                                         \n",
       "1      -2  ...        689          0          0          0         0   \n",
       "2       0  ...       2682       3272       3455       3261         0   \n",
       "3       0  ...      13559      14331      14948      15549      1518   \n",
       "4       0  ...      49291      28314      28959      29547      2000   \n",
       "5       0  ...      35835      20940      19146      19131      2000   \n",
       "\n",
       "    PAY_AMT2  PAY_AMT3  PAY_AMT4  PAY_AMT5  PAY_AMT6  \n",
       "ID                                                    \n",
       "1        689         0         0         0         0  \n",
       "2       1000      1000      1000         0      2000  \n",
       "3       1500      1000      1000      1000      5000  \n",
       "4       2019      1200      1100      1069      1000  \n",
       "5      36681     10000      9000       689       679  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 1, 3, 4])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = df['EDUCATION'], data = df)\n",
    "df['EDUCATION'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(df[(df.EDUCATION == 0) |\n",
    "                (df.EDUCATION == 5) |\n",
    "                (df.EDUCATION == 6)].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 0    14382\n",
       "-1     5474\n",
       " 1     3054\n",
       " 2     2539\n",
       "-2     2300\n",
       " 3      251\n",
       " 4       73\n",
       " 5       21\n",
       " 6       10\n",
       " 7        9\n",
       " 8        8\n",
       "Name: PAY_0, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = df['PAY_0'], data = df)\n",
    "df['PAY_0'].unique()\n",
    "\n",
    "df['PAY_0'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(df[(df.MARRIAGE == 0)].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2724aef0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x = df['AGE'], data = df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Setting up the outcome variable and the design matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Categorical variables to one-hot's\n",
    "onehotencoder = OneHotEncoder(categories=\"auto\")\n",
    "\n",
    "X = ColumnTransformer(\n",
    "    [(\"\", onehotencoder, [3]),],\n",
    "    remainder=\"passthrough\"\n",
    ").fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split the data \n",
    "seed = 21\n",
    "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state = seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scale the data \n",
    "sc = StandardScaler()\n",
    "Xtrain = sc.fit_transform(Xtrain)\n",
    "Xtest = sc.transform(Xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train_onehot, Y_test_onehot = onehotencoder.fit_transform(ytrain), onehotencoder.fit_transform(ytest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Building the logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lambdas=np.logspace(-5,7,13)\n",
    "parameters = [{'C': 1./lambdas, \"solver\":[\"lbfgs\"]}]#*len(parameters)}]\n",
    "scoring = ['accuracy', 'roc_auc']\n",
    "logReg = LogisticRegression()\n",
    "gridSearch = GridSearchCV(logReg, parameters, cv=5, scoring=scoring, refit='roc_auc') \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
